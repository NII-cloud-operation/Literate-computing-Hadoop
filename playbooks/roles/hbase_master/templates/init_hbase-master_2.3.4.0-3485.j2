#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Starts a HBase master daemon
#
# chkconfig: 345 85 15
# description: HBase master daemon
#
### BEGIN INIT INFO
# Provides:          hbase-master
# Short-Description: HBase master daemon
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Required-Start:    $syslog $remote_fs
# Required-Stop:     $syslog $remote_fs
# Should-Start:
# Should-Stop:
### END INIT INFO

. /lib/lsb/init-functions

RETVAL_SUCCESS=0

STATUS_RUNNING=0
STATUS_DEAD=1
STATUS_DEAD_AND_LOCK=2
STATUS_NOT_RUNNING=3
STATUS_OTHER_ERROR=102


ERROR_PROGRAM_NOT_INSTALLED=5
ERROR_PROGRAM_NOT_CONFIGURED=6


RETVAL=0
SLEEP_TIME=5
PROC_NAME="java"

SERVICE_NAME=""

export HBASE_HOME="/usr/hdp/current/hbase-master/../hbase"

SVC_USER="${SVC_USER:-hbase}"

USER="$SVC_USER"
CONF_DIR="${HBASE_HOME}/conf"
. $CONF_DIR/hbase-env.sh

if [ -z "$HBASE_PID_DIR" -o -z "$HBASE_HOME" ]; then
  echo No HBASE_HOME or HBASE_PID_DIR set.
  exit 1
fi

HBASE_PID_DIR="${HBASE_PID_DIR:-/var/run/hbase}"
HBASE_LOG_DIR="${HBASE_LOG_DIR:-/var/log/hbase}"

install -d -m 0755 -o ${SVC_USER} -g ${SVC_USER} ${HBASE_LOG_DIR} 1>/dev/null 2>&1 || :

DAEMON="hbase-master"
DESC="HBase master daemon"
EXEC_PATH="$HBASE_HOME/bin/hbase-daemon.sh"
DAEMON_FLAGS=""
PIDFILE="${HBASE_PID_DIR}/hbase-hbase-master.pid"
LOCKDIR="/var/lock/subsys"
LOCKFILE="$LOCKDIR/hbase-master"
WORKING_DIR="$HBASE_HOME"

install -d -m 0755 -o $SVC_USER -g $SVC_USER ${HBASE_PID_DIR} 1>/dev/null 2>&1 || :
[ -d "$LOCKDIR" ] || install -d -m 0755 $LOCKDIR 1>/dev/null 2>&1 || :

hbase_env() {
    export HBASE_HOME=/usr/lib/hbase
    BIGTOP_DEFAULTS_DIR=${BIGTOP_DEFAULTS_DIR-/etc/default}
    [ -n "${BIGTOP_DEFAULTS_DIR}" -a -r ${BIGTOP_DEFAULTS_DIR}/hbase ] && . ${BIGTOP_DEFAULTS_DIR}/hbase
}

start() {
    hbase_env

    [ -x $EXEC_PATH ] || exit $ERROR_PROGRAM_NOT_INSTALLED
    log_success_msg "Starting $DESC (${DAEMON}): "

    checkstatusofproc
    status=$?
    if [ "$status" -eq "$STATUS_RUNNING" ]; then
        log_success_msg "${DESC} is running"
        exit 0
    fi

    su -s /bin/bash hbase -c "${EXEC_PATH} start master"

    checkstatusofproc
    RETVAL=$?
    [ $RETVAL -eq $STATUS_RUNNING ] && touch $LOCKFILE
    return $RETVAL
}
stop() {
    hbase_env

    log_success_msg "Stopping $DESC (${DAEMON}): "
    su -s /bin/bash hbase -c "${EXEC_PATH} stop master"
    sleep 3
    RETVAL=$?

    [ $RETVAL -eq $RETVAL_SUCCESS ] && rm -f $LOCKFILE $PIDFILE
    return $RETVAL
}
restart() {
  stop
  start
}

checkstatusofproc(){
  pidofproc -p $PIDFILE $PROC_NAME > /dev/null
}

checkstatus(){
  checkstatusofproc
  status=$?

  case "$status" in
    $STATUS_RUNNING)
      log_success_msg "${DESC} is running"
      ;;
    $STATUS_DEAD)
      log_failure_msg "${DESC} is dead and pid file exists"
      ;;
    $STATUS_DEAD_AND_LOCK)
      log_failure_msg "${DESC} is dead and lock file exists"
      ;;
    $STATUS_NOT_RUNNING)
      log_failure_msg "${DESC} is not running"
      ;;
    *)
      log_failure_msg "${DESC} status is unknown"
      ;;
  esac
  return $status
}

condrestart(){
  [ -e $LOCKFILE ] && restart || :
}

check_for_root() {
  if [ $(id -ur) -ne 0 ]; then
    echo 'Error: root user required'
    echo
    exit 1
  fi
}

service() {
  case "$1" in
    start)
      check_for_root
      start
      ;;
    stop)
      check_for_root
      stop
      ;;
    status)
      checkstatus
      RETVAL=$?
      ;;
    restart)
      check_for_root
      restart
      ;;
    condrestart|try-restart)
      check_for_root
      condrestart
      ;;
    *)
      echo $"Usage: $0 {start|stop|status|restart|try-restart|condrestart}"
      exit 1
  esac
}

service "$1"

exit $RETVAL
